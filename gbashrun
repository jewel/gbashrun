#!/usr/bin/env ruby

require 'gtk3'
require 'pty'

Dir.chdir ENV["HOME"]

term_read, term_write, pid = PTY.spawn "TERM=dumb exec bash --login"

window = Gtk::Window.new :toplevel

window.set_can_focus true
window.title = "gbashrun"
window.keep_above = true
window.modal = true
window.set_size_request 800, 250
window.signal_connect :delete_event do
  Gtk.main_quit
end

ctrl = false
alt = false

line = ""

window.signal_connect("key-press-event") do |w, e|
  # puts "#{Gdk::Keyval.to_name(e.keyval)} #{e.keyval}"

  key = nil
  case e.keyval
  when Gdk::Keyval::KEY_Escape
    Gdk.keyboard_ungrab Gdk::CURRENT_TIME
    Gtk.main_quit
  when Gdk::Keyval::KEY_Control_L, Gdk::Keyval::KEY_Control_R
    ctrl = true
  when Gdk::Keyval::KEY_Alt_L, Gdk::Keyval::KEY_Alt_R
   alt = true
  when Gdk::Keyval::KEY_BackSpace
    key = 8.chr
  when Gdk::Keyval::KEY_Up
    key = "\e[A"
  when Gdk::Keyval::KEY_Down
    key = "\e[B"
  when Gdk::Keyval::KEY_Right
    key = "\e[C"
  when Gdk::Keyval::KEY_Left
    key = "\e[D"
  when Gdk::Keyval::KEY_Tab
    key = "\t"
  when Gdk::Keyval::KEY_Return
    term_write.write " &\rexit\r"
    term_write.close
    Gdk.keyboard_ungrab Gdk::CURRENT_TIME
    Gtk.main_quit
    next true
  else
    key = e.keyval.chr if e.keyval < 128
    key = (e.keyval - 96).chr if ctrl
    key = "\e" + key if alt
  end

  term_write.write key if key

  true
end

window.signal_connect("key-release-event") do |w, e|
  case e.keyval
  when Gdk::Keyval::KEY_Control_L, Gdk::Keyval::KEY_Control_R
    ctrl = false
  when Gdk::Keyval::KEY_Alt_L, Gdk::Keyval::KEY_Alt_R
    alt = false
  end
  true
end

textview = Gtk::TextView.new
textview.buffer.text = "\n" * 10
textview.override_font Pango::FontDescription.new( "monospace 18" )

pos = 0
line = String.new

io_channel = GLib::IOChannel.new term_read
io_channel.add_watch GLib::IOChannel::IN do |channel, condition|
  input = term_read.readpartial( 1024 )

  # remove coloring
  input.gsub! /\e\[\d+(?>(;\d+)*)?m/, ''

  b = textview.buffer
  b.delete b.get_iter_at( line: b.line_count - 1), b.end_iter 

  # handle control characters
  input.each_char do |c|
    case c
    when "\a"
      # beep
    when "\n"
      b.insert b.end_iter, line + "\n"
      line = ""
      pos = 0
    when "\b"
      pos -= 1
      pos = 0 if pos < 0
    when "\r"
      pos = 0
    when /[^[:print:]]/
    else
      line[pos,1] = c
      pos += 1
    end
  end
  b.insert b.end_iter, line
  b.place_cursor b.get_iter_at( line: b.line_count - 1, offset: pos )

  true
end

scroll = Gtk::ScrolledWindow.new

textview.signal_connect("size-allocate") do |widget, step, arg2|
  scroll.vadjustment.value = scroll.vadjustment.upper - scroll.vadjustment.page_size
end

window.add scroll
scroll.add textview
window.show_all

while Gdk.keyboard_grab(window.window, true, Gdk::CURRENT_TIME) != Gdk::GrabStatus::SUCCESS
  sleep 0.1
end

Gtk.main
